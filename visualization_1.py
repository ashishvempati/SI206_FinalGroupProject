import requests
import re
import os
import sqlite3
import matplotlib.pyplot as plt

def spotify_pop(cur, conn):
    """
    Input: Database cursor and connection.
    Output: Returns a list of tuples in the format (song, spotify popularity score) in descending order of score.
    Purpose: to rank top 100 hummed songs by spotify popularity. 
    """
    cur.execute('SELECT Spotify_Popularity_Scores.track, Spotify_Popularity_Scores.popularity FROM Spotify_Popularity_Scores')
    tupleslst = cur.fetchall()
    conn.commit()
    lst2 = sorted(tupleslst, key=lambda x: x[1], reverse=True)
    return lst2

def billboard_pop(cur, conn):
    """
    Input: Database cursor and connection.
    Output: Returns a list of tuples in the format (song, humming popularity) in descending order of humming popularity.
    Purpose: to rank top 100 hummed songs in tuples. 
    """
    cur.execute('SELECT Billboard.song, Billboard.song_id FROM Billboard')
    tupleslst = cur.fetchall()
    conn.commit()
    return tupleslst

def compare_top_20(lst1, lst2):
    """
    Input: the two tuple lists generated by the above functions.
    Output: Returns a dictionary with song titles as keys and a [billboard ranking, spotify popularity score]
    formatted list
    Purpose: to make data visualization easier
    """
    dic = {}
    for x in lst1:
        for y in lst2:
            if x[0][:5] == y[0][:5]:
                lst = []
                lst.append(y[1])
                lst.append(x[1])
                dic[x[0]] = lst
    return dic

def score_comparison(dic):
    """
    Input: dictionary of song keys and score values.
    Output: visualization assessing general correlation between Spotify popularity scores and
    Humming popularity scores)
    Purpose: to assess whether songs' Spotify popularity scores have any correlation with 
    their humming popularity scores, and if so, how strong or weak this correlation is.
    """
    bill = []
    spot = []
    for x in dic:
        bill.append(dic[x][0])
        spot.append(dic[x][1])
    spot2 = sorted(spot, reverse=True)
    plt.plot(bill, spot2, 'ro')
    plt.axis([0,100,0,100])
    plt.xlabel('Humming popularity score of songs (low to high)')
    plt.ylabel('Spotify popularity score of songs (low to high)')
    plt.title('Correlation between songs humming popularity and spotify popularity')
    plt.show()



def main():
    """
    Acesses database data and calls functions to make visualizations.
    """
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path+'/MostHummed100.db')
    cur = conn.cursor()
    spot = spotify_pop(cur, conn)
    bill = billboard_pop(cur, conn)
    dic = compare_top_20(spot, bill)
    score_comparison(dic)
    conn.close()


if __name__ == "__main__":
    main()